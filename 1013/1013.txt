구조적 프로그래밍과 객체지향 프로그래밍의 차이점
- 구조적 프로그래밍은 행위(역할을) 전가할 수 없다.
>> 그래서 객체지향 프로그래밍을 해야한다.

객체지향 프로그래밍의 핵심은 >> 캡슐화

instance 변수는 new 할때마다 메모리에 생성되는 변수.

static 변수는 절대 변하지 않으면서, 공통적으로 가져갈 변수들

부모가 결정지을수 없는 것 >> 자식들에게 결정하라고 한다.
img = getImage()
자식이 손대야 하므로 private하게 되면 자식객체는 오버라이드 할 수 없다.
하지만 public으로 하게 되면 어디서든 접근이 가능하므로 좋지 않다.
이렇게 자식객체만 접근 가능하게 하도록 하기 위해서는 >> protected 접근지정자 사용.

그럼 update() 메소드도 protected 해줘야하나??
>> X > 이유는 update()의 경우에는 캔버스에서 스레드를 생성하고 그 스레드에서 사용하고 있으므로, protected 하게 되면
	캔버스에서 사용이 불가능해진다.

내가 마음에 안들어서 부모의 메소드를 수정할 경우 >> public
부모가 자식에게 이거 꼭 구현해주라고 부탁하는 경우 >> protected

프로그램이 로드가 되면 바로 실행되는 static 생성자가 있다.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

keyDown을 구현할때 main(ActionCanvas)에서 로직을 구현할 것인가?
아니면 move(key)로 키값을 넘겨주는 메소드를 각 객체에 생성해서 각 객체가 알아서 행위 하도록 할 것인가? 를 결정해야함.