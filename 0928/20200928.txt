오버로드 시에는 내부 로직을 집중화를 시킬 필요가 있다.
(중복된 코드 제거)
>>	public Exam() {
		this(0,0,0); // 생성될때 0,0,0으로 초기화 한다.(오버로드 생성자 활용)
		//생성자는 처음 초기화할때만 사용. 한번 사용된 애를 초기화 할 수는 없음
	}
	
	public Exam(int kor, int eng, int math) {
		this.kor = kor;
		this.math = math;
		this.eng = eng;
	}

객체를 만들때 다른객체를 부품으로 가질 수 있다(has a 상속)
부품
dependency
구성요소로서의 부품 - has a 관계

생명주기와 객체의 관계
composition has a 관계 - 일체형
association 	관계 - 분리형

틀로써 다른 객체를 가져와 내용을 추가하거나 수정하는 것(Is a 상속)
extends 하게되면 2개의 객체가 생성된다.
두개의 객체를 구별해주기 위해, super와 this를 구분해서 사용한다.
super는 부모객체를 가리킨다.
즉 super();는 부모객체의 생성자를 호출하는 것이다.

부모가 가지고 있는 메서드와 똑같은 이름의 함수를 재정의 하는것 = override

객체와 참조 형식의 개수
NewlecExam exam = new Exam();은 안된다.
Exam exam = NewlecExam();은 가능
Exam형식으로 건물을 지으려면 그것을 온전히 다 가지고(참조가능해야) 있어야한다. 하지만
반대로 보면, NewlecExam을 지으려고 하는데 Exam에는 Newlec이 없다!! 그래서 안된다.

그래서, NewlecExam 에는 참조형식이 2개 존재하는 것이다.

Exam exam = NewlecExam(); 에서 메소드를 객체에서 찾는다. 즉 NewlecExam에서 함수를 찾아서 사용한다.
하지만, 이는 override된 메소드에만 해당되는 이야기.
Exam에 존재하지 않는 메소드는 NewlecExam에 있더라도 사용 불가능하다.
즉 형태(Exam)의 메소드를 사용하지만, override된 메소드가 있다면, 그 메소드를 우선 사용한다.
그럼 NewlecExam의 메소드를 아얘 사용할수 없는가?
((NewlecExam)Exam).함수이름(); 형변환을 통하여 사용가능. 형변환을 괄호로 꼭 먼저 해줘야한다.