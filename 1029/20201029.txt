예외처리

구문오류 논리오류 데이터오류

구문상의 오류는 없지만 실행중에 발생할 수 있는 오류들을 사전에 정의하여 예외상황에서 처리할 수 있도록 하는 것

api 실행중에 오류발생(권한,파일존재, 파일용량 등)시에 api에서 직접 오류를 처리하는것이 아니라
프로그램에 보고를 하고 그 프로그램에서 예외처리를 수행한다.

return 방식으로 보고를 하는 것이 아니고 별도의 채널을 통해 보고(라이브러리, api등 절차가 복잡할때 모든곳에서 return하면 비효율적이므로)

기존의 보고는 throw 1; 이런식으로 던지기만 했다.

현재는 객체로 정의만 해둠(오류 식별용 객체)
throw new 권한없음예외(); -- 오류에 대한 설명을 제공

예외를 던지면 본인에게 영향을 먼저 미침.
그래서 throws 해줘야함. (예외가 여러개가 있을수 있으니 throws)

실행하는 아이는 예외를 어떻게 처리해야할지 모름(그냥 상위로 던지기만 함, 껍데기층이 웹인지 콘솔인지 알 수 없음)
실제 예외 처리는 program(껍데기 층)이 함

stacktrace  >> 보고할때 거쳐온 과정을 담고있음(호출된 메소드들의 리스트가 담겨있음)
전부다 throws 해버리면 JM에서 스텍트레이스를 모두 보여줌(얘네가 다 예외처리 안햇다~~)

finally는 예외가 catch 되엇을때 마무리 지을 것이 있다면 꼭 수행하도록 함.
여러개의 예외처리가 있는경우 공통적으로 마무리 처리 해야할 경우 사용

예외 클래스가 RuntimeException을 상속 받으면 예외처리 하지 않더라도 에러가 안뜸.
에러를 잡아내지 않기때문.

꼭 처리해야하는 예외는 Exception, 잡아내지 않아도 되는것들은 RuntimeException